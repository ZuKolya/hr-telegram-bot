#response_formatter.py:
import pandas as pd
from typing import Optional
from .constants import METRIC_NAMES

class ResponseFormatter:
    @staticmethod
    def format_numeric_statistics(result: pd.DataFrame, column_name: str, user_query: str = "") -> str:
        if len(result) == 0 or result['count'].iloc[0] == 0:
            return f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        row = result.iloc[0]
        
        query_lower = user_query.lower()
        
        if '–º—É–∂—á–∏–Ω' in query_lower and '—Å—Ç–∞–≤–∫' in query_lower:
            return f"üë® –ú—É–∂—á–∏–Ω –Ω–∞ –ø–æ–ª–Ω–æ–π —Å—Ç–∞–≤–∫–µ: {row['count']:,.0f}".replace(',', ' ')
        
        if any(word in query_lower for word in ['—É–¥–∞–ª–µ–Ω', '–¥–∏—Å—Ç–∞–Ω—Ü', 'remote']):
            service_match = re.search(r'–≤ (\w+)', query_lower)
            if service_match:
                service = service_match.group(1)
                return f"üè† –£–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ {service.capitalize()}: {row['count']:,.0f}".replace(',', ' ')
            return f"üè† –£–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {row['count']:,.0f}".replace(',', ' ')
        
        if '0.5' in user_query or '—Å—Ç–∞–≤–∫' in query_lower or 'fte' in query_lower:
            return f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ 0.5 —Å—Ç–∞–≤–∫–∏: {row['count']:,.0f}".replace(',', ' ')
        
        if '—Å—Ç–∞–≤–∫' in query_lower:
            return f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–≤–∫–∞–º:\n‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {row['count']:,.0f}\n‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: {row['average']:.2f}".replace(',', ' ')
        
        if '–æ–ø—ã—Ç' in query_lower and '—Å—Ä–µ–¥–Ω' not in query_lower:
            return f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –æ–ø—ã—Ç–æ–º: {row['count']:,.0f}".replace(',', ' ')
        
        if '–≤–æ–∑—Ä–∞—Å—Ç' in query_lower and '—Å—Ä–µ–¥–Ω' not in query_lower:
            return f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ: {row['count']:,.0f}".replace(',', ' ')
        
        return (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
               f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {row['count']:,.0f}\n"
               f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {row['average']:.2f}\n"
               f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {row['min']}\n"
               f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {row['max']}\n"
               f"‚Ä¢ –°—É–º–º–∞: {row['sum']:,.1f}").replace(',', ' ')

    @staticmethod
    def format_categorical_statistics(result: pd.DataFrame, column_name: str) -> str:
        if len(result) == 0:
            return f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        total = result['count'].sum()
        
        column_names = {
            'location_name': '–ª–æ–∫–∞—Ü–∏—è–º',
            'experience_category': '–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –æ–ø—ã—Ç–∞',
            'age_category': '–≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
            'cluster': '–∫–ª–∞—Å—Ç–µ—Ä–∞–º',
            'service': '—Å–µ—Ä–≤–∏—Å–∞–º',
            'sex': '–ø–æ–ª—É',
            'department_3': '–æ—Ç–¥–µ–ª–∞–º 3 —É—Ä–æ–≤–Ω—è',
            'department_4': '–æ—Ç–¥–µ–ª–∞–º 4 —É—Ä–æ–≤–Ω—è',
            'fte': '—Å—Ç–∞–≤–∫–∞–º'
        }
        
        display_name = column_names.get(column_name, column_name)
        
        response = f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ {display_name}:\n\n"
        
        for _, row in result.iterrows():
            percentage = (row['count'] / total) * 100
            value = row[column_name]
            
            if column_name == 'fte':
                fte_names = {
                    0.0: "0.0 (–Ω—É–ª–µ–≤–∞—è)",
                    0.2: "0.2", 
                    0.37: "0.37",
                    0.4: "0.4",
                    0.5: "0.5 (–ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è)",
                    0.75: "0.75",
                    1.0: "1.0 (–ø–æ–ª–Ω–∞—è)"
                }
                value = fte_names.get(value, f"{value}")
            
            if column_name == 'sex':
                value = '–ñ–µ–Ω—â–∏–Ω—ã' if value == 'F' else '–ú—É–∂—á–∏–Ω—ã' if value == 'M' else value
            
            response += f"‚Ä¢ {value}: {row['count']:,.0f} ({percentage:.1f}%)\n".replace(',', ' ')
        
        return response

    @staticmethod
    def format_cross_analysis(result: pd.DataFrame, column_x: str, column_y: str) -> str:
        if len(result) == 0:
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        
        response = f"üîÄ –ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {column_x} √ó {column_y}:\n\n"
        current_x = None
        
        for _, row in result.iterrows():
            if row[column_x] != current_x:
                if current_x is not None:
                    response += "\n"
                response += f"üìã {row[column_x]}:\n"
                current_x = row[column_x]
            response += f"   ‚Ä¢ {row[column_y]}: {row['count']:,.0f}\n".replace(',', ' ')
        
        return response

    @staticmethod
    def format_time_series(result: pd.DataFrame, metric: str, group_by: Optional[str]) -> str:
        if len(result) == 0:
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        
        metric_name = METRIC_NAMES.get(metric, metric)
        response = f"üìà –î–∏–Ω–∞–º–∏–∫–∞ {metric_name}:\n\n"
        
        if group_by and group_by in result.columns:
            groups = pd.unique(result[group_by].dropna())
            for group in groups:
                group_data = result[result[group_by] == group]
                response += f"üè∑Ô∏è {group}:\n"
                for _, row in group_data.iterrows():
                    date_str = str(row['report_date'])[:10]
                    value = row['value']
                    if metric == 'attrition_rate':
                        response += f"   ‚Ä¢ {date_str}: {value:.1f}%\n"
                    else:
                        response += f"   ‚Ä¢ {date_str}: {value:,.0f}\n".replace(',', ' ')
                response += "\n"
        else:
            for _, row in result.iterrows():
                date_str = str(row['report_date'])[:10]
                value = row['value']
                if metric == 'attrition_rate':
                    response += f"‚Ä¢ {date_str}: {value:.1f}%\n"
                else:
                    response += f"‚Ä¢ {date_str}: {value:,.0f}\n".replace(',', ' ')
        
        return response

    @staticmethod
    def format_top_values(result: pd.DataFrame, column_name: str, n: int) -> str:
        if len(result) == 0:
            return f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        column_names = {
            'location_name': '–ª–æ–∫–∞—Ü–∏–π',
            'cluster': '–∫–ª–∞—Å—Ç–µ—Ä–æ–≤',
            'service': '—Å–µ—Ä–≤–∏—Å–æ–≤',
            'department_3': '–æ—Ç–¥–µ–ª–æ–≤',
            'age_category': '–≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
            'experience_category': '–∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–ø—ã—Ç–∞',
            'fte': '—Å—Ç–∞–≤–æ–∫'  # –ù–û–í–û–ï: –¥–ª—è —Ç–æ–ø–∞ —Å—Ç–∞–≤–æ–∫
        }
        
        display_name = column_names.get(column_name, column_name)
        
        header = f"üèÜ –¢–æ–ø-{n} {display_name}"
        
        if len(result) > 0 and 'hirecount' in str(result.columns):
            header += " –ø–æ –Ω–∞–π–º—É:"
        else:
            header += " –ø–æ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏:"
        
        response = f"{header}\n\n"
        
        for i, (_, row) in enumerate(result.iterrows(), 1):
            value = row[column_name]
            
            if column_name == 'fte':
                fte_names = {
                    0.0: "0.0 (–Ω—É–ª–µ–≤–∞—è)",
                    0.2: "0.2", 
                    0.37: "0.37",
                    0.4: "0.4",
                    0.5: "0.5 (–ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è)",
                    0.75: "0.75",
                    1.0: "1.0 (–ø–æ–ª–Ω–∞—è)"
                }
                value = fte_names.get(value, f"{value}")
            
            response += f"{i}. {value}: {row['count']:,.0f}\n".replace(',', ' ')
        
        return response

    @staticmethod
    def format_unique_values(result: pd.DataFrame, column_name: str) -> str:
        if len(result) == 0:
            return f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–ª–æ–Ω–∫–µ '{column_name}'"
        
        values = result[column_name].tolist()
        
        column_names = {
            'location_name': '–ª–æ–∫–∞—Ü–∏–∏',
            'cluster': '–∫–ª–∞—Å—Ç–µ—Ä—ã', 
            'service': '—Å–µ—Ä–≤–∏—Å—ã',
            'department_3': '–æ—Ç–¥–µ–ª—ã 3 —É—Ä–æ–≤–Ω—è',
            'sex': '–ø–æ–ª',
            'age_category': '–≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'experience_category': '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø—ã—Ç–∞',
            'fte': '—Å—Ç–∞–≤–∫–∏'  # –ù–û–í–û–ï: –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
        }
        
        display_name = column_names.get(column_name, column_name)
        
        if len(values) > 10:
            response = f"üìã {display_name.capitalize()} (–ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(values)}):\n\n"
            values = values[:10]
        else:
            response = f"üìã {display_name.capitalize()}:\n\n"
        
        for i, value in enumerate(values, 1):
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–≤–æ–∫
            if column_name == 'fte':
                fte_names = {
                    0.0: "0.0 (–Ω—É–ª–µ–≤–∞—è)",
                    0.2: "0.2", 
                    0.37: "0.37",
                    0.4: "0.4",
                    0.5: "0.5 (–ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è)",
                    0.75: "0.75",
                    1.0: "1.0 (–ø–æ–ª–Ω–∞—è)"
                }
                value = fte_names.get(value, f"{value}")
            
            clean_value = str(value).replace('(–ù–µ –∏—Å–ø)', '').replace('(–Ω–µ –∏—Å–ø)', '').replace('(–ù–µ –∏—Å–ø.)', '').strip()
            if clean_value:
                response += f"{i}. {clean_value}\n"
        
        if len(result) > 10:
            response += f"\n... –∏ –µ—â–µ {len(result) - 10} –¥—Ä—É–≥–∏—Ö"
        
        return response