# telegram_bot.py
import asyncio
import re
import os
import time
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from menu.advanced_core import AdvancedHRAnalyzer
from config import DB_PATH, BOT_TOKEN
from ai_assistant import AIAssistant
from menu.core_handlers import *
from menu.context import AnalysisContext

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

SELECT_ACTION, SELECT_DETAILED, SELECT_HIRING_SERVICE, AI_ASSISTANT = range(4)

class HRTelegramBot:
    def __init__(self):
        self.analyzer = AdvancedHRAnalyzer(DB_PATH)
        self.ai_assistant = AIAssistant(DB_PATH)
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.menu_commands = [
            "üìà –î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏", "üë• –î–µ–º–æ–≥—Ä–∞—Ñ–∏—è", "üåê –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤", 
            "‚ö†Ô∏è  –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤", "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–π–º—É", "üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            "üí¨ –°–ø—Ä–æ—Å–∏—Ç—å –≠–π—á–∞—Ä–∏–∫–∞"
        ]
        
        self.analysis_ctx = AnalysisContext(
            analyzer=self.analyzer,
            menu_commands=self.menu_commands,
            show_main_menu_func=self.show_main_menu,
            select_detailed_const=SELECT_DETAILED,
            select_hiring_const=SELECT_HIRING_SERVICE,
            end_const=ConversationHandler.END
        )
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data.clear()
        return await self.show_main_menu(update, MAIN_MENU_TEXT)

    async def show_main_menu(self, update: Update, text: str = MAIN_MENU_TEXT):
        reply_markup = create_main_keyboard()
        
        if hasattr(update, 'message'):
            await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            await update.reply_text(text, reply_markup=reply_markup)
        
        return SELECT_ACTION

    async def get_all_services(self):
        try:
            return self.analyzer.get_all_services()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return ["–¢–∞–∫—Å–∏", "–ú–∞—Ä–∫–µ—Ç", "–ö—Ä–∞—É–¥", "–õ–∞–≤–∫–∞", "–§–∏–Ω—Ç–µ—Ö", "–ï–¥–∞", "–î–æ—Å—Ç–∞–≤–∫–∞", "–û–±–ª–∞–∫–æ"]

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == 'back_to_menu':
            context.user_data.clear()
            try:
                await query.message.delete()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return await self.show_main_menu(query, RETURN_TO_MENU_TEXT)
        
        elif query.data.startswith('choose_another_'):
            analysis_type = query.data.replace('choose_another_', '')
            
            if analysis_type == 'hiring':
                services = list(context.user_data.get('hiring_data', {}).keys())
                keyboard = create_service_selection_keyboard(services, 'hiring')
                await query.message.reply_text(CHOOSE_HIRING_SERVICE_TEXT, reply_markup=keyboard)
                context.user_data['conversation_state'] = 'awaiting_hiring_service'
                return SELECT_HIRING_SERVICE
            else:
                services = await self.get_all_services()
                keyboard = create_service_selection_keyboard(services, 'detailed')
                await query.message.reply_text(CHOOSE_SERVICE_TEXT, reply_markup=keyboard)
                context.user_data['conversation_state'] = 'awaiting_service'
                return SELECT_DETAILED
        
        elif query.data.startswith('back_to_actions_'):
            analysis_type = query.data.replace('back_to_actions_', '')
            action_keyboard = create_next_action_keyboard(analysis_type)
            
            try:
                await query.message.delete()
            except:
                pass
                
            await query.message.reply_text(
                NEXT_ACTION_TEXT,
                reply_markup=action_keyboard
            )
            return SELECT_ACTION
    
        elif query.data.startswith('service_'):
            return await handle_callback_service_selection(query, context, self.analyzer, SELECT_ACTION)
        
        elif query.data.startswith('graphs_'):
            await query.message.delete()
            return await send_graphs(query, context)
        
        elif query.data == 'choose_another':
            current_analysis_type = context.user_data.get('last_analysis_type')
            
            if current_analysis_type == 'hiring':
                services = list(context.user_data.get('hiring_data', {}).keys())
                keyboard = create_service_selection_keyboard(services, 'hiring')
                await query.message.reply_text(CHOOSE_HIRING_SERVICE_TEXT, reply_markup=keyboard)
                context.user_data['conversation_state'] = 'awaiting_hiring_service'
                return SELECT_HIRING_SERVICE
            else:
                services = await self.get_all_services()
                keyboard = create_service_selection_keyboard(services, 'detailed')
                await query.message.reply_text(CHOOSE_SERVICE_TEXT, reply_markup=keyboard)
                context.user_data['conversation_state'] = 'awaiting_service'
                return SELECT_DETAILED

    async def handle_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_text = update.message.text
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é - –î–û–ë–ê–í–õ–ï–ù–ê –ö–ù–û–ü–ö–ê "‚óÄÔ∏è –í –º–µ–Ω—é"
        if user_text in ["‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/menu", "–º–µ–Ω—é", "‚óÄÔ∏è –í –º–µ–Ω—é"]:
            context.user_data.clear()
            return await self.show_main_menu(update, RETURN_TO_MENU_TEXT)
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –º–µ–Ω—é - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –¥–µ–π—Å—Ç–≤–∏–µ
        if user_text in self.menu_commands:
            try:
                if user_text in ["üìà –î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏", "üë• –î–µ–º–æ–≥—Ä–∞—Ñ–∏—è", "üåê –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤"]:
                    loading_message_id = await send_loading_message(update)
                    await show_typing(update)
                    
                    result = None
                    plot_path = None
                    
                    if user_text == "üìà –î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏":
                        result, plot_path = self.analyzer.company_dynamics()
                    elif user_text == "üë• –î–µ–º–æ–≥—Ä–∞—Ñ–∏—è":
                        result, plot_path = self.analyzer.demographic_dashboard()
                    elif user_text == "üåê –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤":
                        result, plot_path = self.analyzer.service_analysis()
                    
                    if result is None:
                        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                        return await self.show_main_menu(update)
                    
                    context.user_data['plot_path'] = plot_path
                    context.user_data['last_analysis_type'] = user_text.lower().replace(' ', '_')
                    
                    await send_analysis_result(update, result, None, loading_message_id)
                    
                    graphs_keyboard = create_graphs_keyboard("main")
                    await update.message.reply_text(
                        "–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏?",
                        reply_markup=graphs_keyboard
                    )
                    
                    return SELECT_ACTION
                
                elif user_text == "üí¨ –°–ø—Ä–æ—Å–∏—Ç—å –≠–π—á–∞—Ä–∏–∫–∞":
                    await update.message.reply_text(
                        "–ü—Ä–∏–≤–µ—Ç, —è –≠–π—á–∞—Ä–∏–∫! –ü–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ HR –∞–Ω–∞–ª–∏—Ç–∏–∫–µ üìä\n\n"
                        "–ó–∞–¥–∞–π –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                        "‚Ä¢ –°–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –¢–∞–∫—Å–∏?\n"
                        "‚Ä¢ –ü–æ–∫–∞–∂–∏ –¥–∏–Ω–∞–º–∏–∫—É –Ω–∞–π–º–æ–≤\n"
                        "‚Ä¢ –ö–∞–∫–∞—è —Ç–µ–∫—É—á–µ—Å—Ç—å –≤ –ï–¥–µ?\n\n"
                        "‚ùì –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –µ—â–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –Ω–∞–ø–∏—à–∏:\n"
                        "‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤\n\n"
                        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Ô∏è‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], resize_keyboard=True)
                    )
                    return AI_ASSISTANT
                
                else:
                    loading_message_id = await send_loading_message(update)
                    await show_typing(update)
                    
                    if user_text == "‚ö†Ô∏è  –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤":
                        result, plot_path = self.analyzer.risk_assessment()
                        if result is None:
                            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å —Ä–∏—Å–∫–∏")
                            return await self.show_main_menu(update)
                            
                        await send_analysis_result(update, result, plot_path, loading_message_id)
                        return await self.show_main_menu(update, NEXT_ACTION_TEXT)
                        
                    elif user_text == "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–π–º—É":
                        result, hiring_data = self.analyzer.hiring_recommendations()
                        
                        if hiring_data is None or not hiring_data:
                            await send_analysis_result(update, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –Ω–∞–π–º—É", None, loading_message_id)
                            return await self.show_main_menu(update, NEXT_ACTION_TEXT)
                        
                        context.user_data['hiring_data'] = hiring_data
                        context.user_data['last_analysis_type'] = 'hiring'
                        
                        await send_analysis_result(update, result, None, loading_message_id)
                        
                        services = list(hiring_data.keys())
                        keyboard = create_service_selection_keyboard(services, 'hiring')
                        
                        await update.message.reply_text(
                            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–π–º–∞:",
                            reply_markup=keyboard
                        )
                        
                        context.user_data['conversation_state'] = 'awaiting_hiring_service'
                        return SELECT_HIRING_SERVICE
                        
                    elif user_text == "üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
                        services = await self.get_all_services()
                        keyboard = create_service_selection_keyboard(services, 'detailed')
                        
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if loading_message_id:
                            await delete_message(update, loading_message_id)
                        
                        await update.message.reply_text(
                            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
                            reply_markup=keyboard
                        )
                        context.user_data['conversation_state'] = 'awaiting_service'
                        context.user_data['last_analysis_type'] = 'detailed'
                        return SELECT_DETAILED
                
                return SELECT_ACTION
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
                logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:", exc_info=True)
                await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
                return await self.show_main_menu(update)
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏
        current_state = context.user_data.get('conversation_state')
        
        if current_state == 'awaiting_service':
            return await handle_detailed_analysis(update, context, self.analysis_ctx)
        elif current_state == 'awaiting_hiring_service':
            return await handle_hiring_service_analysis(update, context, self.analysis_ctx)
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é –∏ –Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç, –Ω–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            if user_text.strip() and user_text not in self.menu_commands:
                await update.message.reply_text(
                    "üí° –Ø –±–æ—Ç –¥–ª—è HR –∞–Ω–∞–ª–∏—Ç–∏–∫–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.\n\n"
                    "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ 'üí¨ –°–ø—Ä–æ—Å–∏—Ç—å –≠–π—á–∞—Ä–∏–∫–∞'"
                )
            return await self.show_main_menu(update, CHOOSE_FROM_MENU_TEXT)

    async def handle_ai_assistant(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_text = update.message.text
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏–∑ AI —Ä–µ–∂–∏–º–∞
        if user_text in ["‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/menu", "–º–µ–Ω—é", "‚óÄÔ∏è –í –º–µ–Ω—é"]:
            context.user_data.clear()
            return await self.show_main_menu(update, RETURN_TO_MENU_TEXT)
        
        current_time = time.time()
        last_request_time = context.user_data.get('last_ai_request', 0)
        
        if current_time - last_request_time < 2:
            await update.message.reply_text("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
            return AI_ASSISTANT
        
        context.user_data['last_ai_request'] = current_time
        
        try:
            loading_message_id = await send_loading_message(update)
            await show_typing(update)
            
            response = await self.ai_assistant.process_query(user_text)
            
            await delete_message(update, loading_message_id)
            await update.message.reply_text(response)
            
            return AI_ASSISTANT
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é: /menu"
            )
            return AI_ASSISTANT

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data.clear()
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return await self.show_main_menu(update)

    def run(self):
        callback_handler = CallbackQueryHandler(self.handle_callback_query)
        
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                SELECT_ACTION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_action),
                    callback_handler
                ],
                SELECT_DETAILED: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND,
                        lambda u, c: handle_detailed_analysis(u, c, self.analysis_ctx)),
                    callback_handler
                ],
                SELECT_HIRING_SERVICE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND,
                        lambda u, c: handle_hiring_service_analysis(u, c, self.analysis_ctx)),
                    callback_handler
                ],
                AI_ASSISTANT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_ai_assistant),
                    callback_handler
                ]
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
            allow_reentry=True
        )
        
        self.application.add_handler(CommandHandler('menu', self.show_main_menu))
        self.application.add_handler(conv_handler)
        
        logger.info("HR –±–æ—Ç c –≠–π—á–∞—Ä–∏–∫–æ–º –∑–∞–ø—É—â–µ–Ω üí°")
        self.application.run_polling()

if __name__ == "__main__":
    bot = HRTelegramBot()
    bot.run()
