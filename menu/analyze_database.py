import sqlite3
import pandas as pd
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config import DB_PATH

def analyze_database():
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        conn = sqlite3.connect(DB_PATH)
        
        print("üîç –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–• HR_BOT\n")
        
        # 1. –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ
        print("1. üìã –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´:")
        table_info = pd.read_sql_query("PRAGMA table_info(hr_data_clean)", conn)
        print(table_info.to_string(index=False))
        print()
        
        # 2. –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("2. üìä –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        basic_stats = pd.read_sql_query("""
            SELECT 
                COUNT(*) as total_records,
                COUNT(DISTINCT report_date) as unique_dates,
                MIN(report_date) as first_date,
                MAX(report_date) as last_date
            FROM hr_data_clean
        """, conn)
        print(basic_stats.to_string(index=False))
        print()
        
        # 3. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–°)
        print("3. üè∑Ô∏è –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø:")
        
        columns_to_analyze = ['service', 'location_name', 'cluster', 'sex', 
                             'department_3', 'age_category', 'experience_category']
        
        for column in columns_to_analyze:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            count_result = pd.read_sql_query(f"""
                SELECT COUNT(DISTINCT {column}) as unique_count
                FROM hr_data_clean
                WHERE {column} IS NOT NULL
            """, conn)
            
            # –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–µ 10)
            sample_result = pd.read_sql_query(f"""
                SELECT DISTINCT {column}
                FROM hr_data_clean
                WHERE {column} IS NOT NULL
                LIMIT 10
            """, conn)
            
            unique_count = count_result['unique_count'].iloc[0]
            sample_values = sample_result[column].tolist()
            
            print(f"{column}: {unique_count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
            print(f"   –ü—Ä–∏–º–µ—Ä—ã: {', '.join(map(str, sample_values[:5]))}")
            if unique_count > 5:
                print(f"   ... –∏ –µ—â–µ {unique_count - 5} –¥—Ä—É–≥–∏—Ö")
            print()
        
        # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Å–ª–æ–≤—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
        print("4. üî¢ –ß–ò–°–õ–û–í–´–ï –î–ê–ù–ù–´–ï:")
        numeric_stats = pd.read_sql_query("""
            SELECT 
                'fullyears' as column_name,
                COUNT(fullyears) as non_null_count,
                ROUND(AVG(fullyears), 2) as avg_value,
                MIN(fullyears) as min_value,
                MAX(fullyears) as max_value
            FROM hr_data_clean
            UNION ALL
            SELECT 
                'experience',
                COUNT(experience),
                ROUND(AVG(experience), 2),
                MIN(experience),
                MAX(experience)
            FROM hr_data_clean
            UNION ALL
            SELECT 
                'fte',
                COUNT(fte),
                ROUND(AVG(fte), 2),
                MIN(fte),
                MAX(fte)
            FROM hr_data_clean
            UNION ALL
            SELECT 
                'real_day',
                COUNT(real_day),
                ROUND(AVG(real_day), 2),
                MIN(real_day),
                MAX(real_day)
            FROM hr_data_clean
        """, conn)
        print(numeric_stats.to_string(index=False))
        print()
        
        # 5. –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç –∏ —Ñ–ª–∞–≥–æ–≤
        print("5. üìÖ –î–ê–¢–´ –ò –§–õ–ê–ì–ò:")
        date_analysis = pd.read_sql_query("""
            SELECT 
                report_date,
                SUM(hirecount) as total_hires,
                SUM(firecount) as total_fires,
                COUNT(*) as total_employees,
                ROUND(CAST(SUM(firecount) AS FLOAT) / COUNT(*) * 100, 2) as turnover_rate_percent
            FROM hr_data_clean
            GROUP BY report_date
            ORDER BY report_date
        """, conn)
        print(date_analysis.to_string(index=False))
        print()
        
        # 6. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º (–ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞)
        print("6. üè¢ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –°–ï–†–í–ò–°–ê–ú (–ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞):")
        service_stats = pd.read_sql_query("""
            SELECT 
                service,
                COUNT(*) as employee_count,
                ROUND(AVG(fullyears), 2) as avg_age,
                ROUND(AVG(experience), 2) as avg_experience_months,
                ROUND(AVG(fte), 2) as avg_fte,
                SUM(CASE WHEN sex = 'M' THEN 1 ELSE 0 END) as male_count,
                SUM(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) as female_count
            FROM hr_data_clean
            WHERE report_date = (SELECT MAX(report_date) FROM hr_data_clean)
            GROUP BY service
            ORDER BY employee_count DESC
        """, conn)
        print(service_stats.to_string(index=False))
        print()
        
        # 7. –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π
        print("7. üìù –ü–†–ò–ú–ï–†–´ –ó–ê–ü–ò–°–ï–ô (–ø–µ—Ä–≤—ã–µ 10):")
        samples = pd.read_sql_query("""
            SELECT 
                service, location_name, cluster, sex, fullyears as age,
                experience, fte, hire_to_company, fire_from_company,
                hirecount, firecount, report_date
            FROM hr_data_clean
            WHERE report_date = (SELECT MAX(report_date) FROM hr_data_clean)
            ORDER BY service, location_name
            LIMIT 10
        """, conn)
        print(samples.to_string(index=False))
        print()
        
        # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        print("8. ‚úÖ –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•:")
        quality_check = pd.read_sql_query("""
            SELECT 
                '–†–∞–±–æ—Ç–∞—é—â–∏–µ —Å firecount=1' as check_type,
                COUNT(*) as count
            FROM hr_data_clean
            WHERE firecount = 1 AND fire_from_company = '1970-01-01 00:00:00'
            UNION ALL
            SELECT 
                '–£–≤–æ–ª–µ–Ω–Ω—ã–µ —Å firecount=0',
                COUNT(*)
            FROM hr_data_clean
            WHERE firecount = 0 AND fire_from_company != '1970-01-01 00:00:00'
            UNION ALL
            SELECT 
                '–ó–∞–ø–∏—Å–∏ –±–µ–∑ —Å–µ—Ä–≤–∏—Å–∞',
                COUNT(*)
            FROM hr_data_clean
            WHERE service IS NULL OR service = ''
            UNION ALL
            SELECT 
                '–ó–∞–ø–∏—Å–∏ –±–µ–∑ –ª–æ–∫–∞—Ü–∏–∏',
                COUNT(*)
            FROM hr_data_clean
            WHERE location_name IS NULL OR location_name = ''
        """, conn)
        print(quality_check.to_string(index=False))
        print()
        
        # 9. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∫–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        print("9. üéØ –í–°–ï –°–ï–†–í–ò–°–´ –í –ë–ê–ó–ï:")
        all_services = pd.read_sql_query("""
            SELECT DISTINCT service
            FROM hr_data_clean
            WHERE service IS NOT NULL
            ORDER BY service
        """, conn)
        print(all_services.to_string(index=False))
        print()
        
        # 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–∞–≤–æ–∫ (FTE)
        print("10. üí∞ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–ê–í–û–ö (FTE):")
        fte_distribution = pd.read_sql_query("""
            SELECT 
                fte,
                COUNT(*) as employee_count,
                ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM hr_data_clean WHERE report_date = (SELECT MAX(report_date) FROM hr_data_clean)), 2) as percentage
            FROM hr_data_clean
            WHERE report_date = (SELECT MAX(report_date) FROM hr_data_clean)
            GROUP BY fte
            ORDER BY fte
        """, conn)
        print(fte_distribution.to_string(index=False))
        
        conn.close()
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    analyze_database()