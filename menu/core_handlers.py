# core_handlers.py
import asyncio
import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction
from telegram.ext import ContextTypes

MAIN_MENU_TEXT = "üìà HR –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≠–π—á–∞—Ä–∏–∫—Éüí°:"
CHOOSE_SERVICE_TEXT = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:"
CHOOSE_HIRING_SERVICE_TEXT = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–π–º–∞:"
NEXT_ACTION_TEXT = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
RETURN_TO_MENU_TEXT = "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
CHOOSE_FROM_MENU_TEXT = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
LOADING_TEXT = "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"

logger = logging.getLogger(__name__)

async def show_typing(update: Update):
    try:
        if hasattr(update, 'message'):
            await update.message.chat.send_action(action=ChatAction.TYPING)
        else:
            await update.chat.send_action(action=ChatAction.TYPING)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ typing: {e}")

async def send_loading_message(update: Update):
    try:
        if hasattr(update, 'message'):
            message = await update.message.reply_text(LOADING_TEXT)
            return message.message_id
        else:
            message = await update.reply_text(LOADING_TEXT)
            return message.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None

async def delete_message(update: Update, message_id: int):
    try:
        if hasattr(update, 'message'):
            await update.message.chat.delete_message(message_id)
        else:
            await update.delete_message(message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def send_analysis_result(update: Update, result: str, plot_path=None, loading_message_id=None):
    if loading_message_id:
        await delete_message(update, loading_message_id)
    
    if len(result) > 4000:
        parts = [result[i:i+4000] for i in range(0, len(result), 4000)]
        for i, part in enumerate(parts):
            await update.message.reply_text(f"({i+1}/{len(parts)})\n{part}")
            await asyncio.sleep(0.5)
    else:
        await update.message.reply_text(result)
    
    if plot_path:
        try:
            if isinstance(plot_path, list):
                for path in plot_path:
                    if path and os.path.exists(path):
                        await show_typing(update)
                        with open(path, 'rb') as photo:
                            await update.message.reply_photo(photo=photo)
                        os.remove(path)
                        await asyncio.sleep(0.5)
            elif plot_path and os.path.exists(plot_path):
                await show_typing(update)
                with open(plot_path, 'rb') as photo:
                    await update.message.reply_photo(photo=photo)
                os.remove(plot_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")

def create_main_keyboard():
    keyboard = [
        [KeyboardButton("üë• –î–µ–º–æ–≥—Ä–∞—Ñ–∏—è"), KeyboardButton("üåê –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤")],
        [KeyboardButton("üìà –î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏"), KeyboardButton("‚ö†Ô∏è  –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤")],
        [KeyboardButton("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–π–º—É"), KeyboardButton("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")],
        [KeyboardButton("üí¨ –°–ø—Ä–æ—Å–∏—Ç—å –≠–π—á–∞—Ä–∏–∫–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_graphs_keyboard(analysis_type):
    keyboard = [
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", callback_data=f"graphs_{analysis_type}")],
        [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_service_keyboard(services, include_back=False):
    keyboard = []
    row = []
    
    for i, service in enumerate(services):
        row.append(InlineKeyboardButton(service, callback_data=f"service_{service}"))
        if len(row) == 2 or i == len(services) - 1:
            keyboard.append(row)
            row = []
    
    if include_back:
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def create_next_action_keyboard(analysis_type):
    keyboard = [
        [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å", callback_data=f"choose_another_{analysis_type}")],
        [InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_service_selection_keyboard(services, analysis_type):
    keyboard = []
    row = []
    
    for i, service in enumerate(services):
        row.append(InlineKeyboardButton(service, callback_data=f"service_{service}"))
        if len(row) == 2 or i == len(services) - 1:
            keyboard.append(row)
            row = []
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_actions_{analysis_type}")])
    
    return InlineKeyboardMarkup(keyboard)

async def handle_detailed_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE, analysis_ctx):
    user_text = update.message.text
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    if user_text in ["‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/menu", "–º–µ–Ω—é"]:
        context.user_data.clear()
        return await analysis_ctx.show_main_menu_func(update, RETURN_TO_MENU_TEXT)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if user_text in analysis_ctx.menu_commands:
        context.user_data.clear()
        return await analysis_ctx.show_main_menu_func(update, RETURN_TO_MENU_TEXT)
    
    loading_message_id = None
    try:
        loading_message_id = await send_loading_message(update)
        await show_typing(update)
        
        result, plot_path = analysis_ctx.analyzer.detailed_analysis("service", user_text)
        
        if result.startswith("‚ùå –°–µ—Ä–≤–∏—Å"):
            if loading_message_id:
                await delete_message(update, loading_message_id)
            await update.message.reply_text(result)
            return analysis_ctx.select_detailed_const
        
        context.user_data['plot_path'] = plot_path
        context.user_data['last_analysis_type'] = 'detailed'
        
        await send_analysis_result(update, result, None, loading_message_id)
        
        action_keyboard = create_next_action_keyboard("detailed")
        await update.message.reply_text(
            NEXT_ACTION_TEXT,
            reply_markup=action_keyboard
        )
        
        return SELECT_ACTION
        
    except Exception as e:
        if loading_message_id:
            await delete_message(update, loading_message_id)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return analysis_ctx.select_detailed_const

async def handle_hiring_service_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE, analysis_ctx):
    user_text = update.message.text
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    if user_text in ["‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/menu", "–º–µ–Ω—é"]:
        context.user_data.clear()
        return await analysis_ctx.show_main_menu_func(update, RETURN_TO_MENU_TEXT)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if user_text in analysis_ctx.menu_commands:
        context.user_data.clear()
        return await analysis_ctx.show_main_menu_func(update, RETURN_TO_MENU_TEXT)
    
    loading_message_id = None
    try:
        loading_message_id = await send_loading_message(update)
        await show_typing(update)
        
        result, plot_path = analysis_ctx.analyzer.hiring_service_analysis(user_text)
        
        if result.startswith("‚ùå –°–µ—Ä–≤–∏—Å"):
            if loading_message_id:
                await delete_message(update, loading_message_id)
            await update.message.reply_text(result)
            return analysis_ctx.select_hiring_const
        
        context.user_data['plot_path'] = plot_path
        context.user_data['last_analysis_type'] = 'hiring'
        
        await send_analysis_result(update, result, None, loading_message_id)
        
        action_keyboard = create_next_action_keyboard("hiring")
        await update.message.reply_text(
            NEXT_ACTION_TEXT,
            reply_markup=action_keyboard
        )
        
        return SELECT_ACTION
        
    except Exception as e:
        if loading_message_id:
            await delete_message(update, loading_message_id)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–π–º–∞: {str(e)}")
        return analysis_ctx.select_hiring_const

async def handle_callback_service_selection(query, context, analyzer, end_const):
    service_name = query.data.replace('service_', '')
    
    loading_message_id = None
    try:
        loading_message = await query.message.reply_text(LOADING_TEXT)
        loading_message_id = loading_message.message_id
        await show_typing(query)
        
        result = None
        plot_path = None
        
        if context.user_data.get('conversation_state') == 'awaiting_service':
            result, plot_path = analyzer.detailed_analysis("service", service_name)
            analysis_type = 'detailed'
            
        elif context.user_data.get('conversation_state') == 'awaiting_hiring_service':
            result, plot_path = analyzer.hiring_service_analysis(service_name)
            analysis_type = 'hiring'
        
        if result is None:
            raise Exception("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        
        if result.startswith("‚ùå –°–µ—Ä–≤–∏—Å"):
            await delete_message(query, loading_message_id)
            await query.message.reply_text(result)
            return context.user_data.get('conversation_state')
        
        context.user_data['plot_path'] = plot_path
        context.user_data['last_analysis_type'] = analysis_type
        
        await delete_message(query, loading_message_id)
        await query.message.reply_text(result)
        
        action_keyboard = create_next_action_keyboard(analysis_type)
        await query.message.reply_text(
            NEXT_ACTION_TEXT,
            reply_markup=action_keyboard
        )
        
        return end_const
        
    except Exception as e:
        if loading_message_id:
            await delete_message(query, loading_message_id)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {e}")
        await query.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–µ—Ä–≤–∏—Å–∞ '{service_name}'.")
        return context.user_data.get('conversation_state')

async def send_graphs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        plot_path = context.user_data.get('plot_path')
        if plot_path:
            await show_typing(update)
            
            if isinstance(plot_path, list):
                for path in plot_path:
                    if path and os.path.exists(path):
                        with open(path, 'rb') as photo:
                            await update.message.reply_photo(photo=photo)
                        os.remove(path)
                        await asyncio.sleep(0.5)
            elif plot_path and os.path.exists(plot_path):
                with open(plot_path, 'rb') as photo:
                    await update.message.reply_photo(photo=photo)
                os.remove(plot_path)
            
            context.user_data.pop('plot_path', None)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            await update.message.reply_text(
                "‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!",
                reply_markup=create_main_keyboard()  # ‚Üê –í–û–ó–í–†–ê–©–ê–ï–ú –û–°–ù–û–í–ù–£–Æ –ö–õ–ê–í–ò–ê–¢–£–†–£
            )
            return SELECT_ACTION
            
        else:
            await update.message.reply_text(
                "‚ùå –ì—Ä–∞—Ñ–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã",
                reply_markup=create_main_keyboard()
            )
            return SELECT_ACTION
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤",
            reply_markup=create_main_keyboard()
        )
        return SELECT_ACTION

SELECT_ACTION, SELECT_DETAILED, SELECT_HIRING_SERVICE, AI_ASSISTANT = range(4)