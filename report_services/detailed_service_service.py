# report_services/detailed_service_service.py
import pandas as pd

class DetailedServiceService:
    def __init__(self, data_repository):
        self.repo = data_repository
    
    def generate_report(self, service_name, report_date):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–µ—Ä–≤–∏—Å—É"""
        data = self.repo.get_detailed_service_analysis(service_name, report_date)
        
        if len(data) == 0:
            return f"‚ùå –°–µ—Ä–≤–∏—Å '{service_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", None
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_employees = data['employees'].sum()
        total_fires = data['fires'].sum()
        total_attrition = (total_fires / total_employees) * 100 if total_employees > 0 else 0
        avg_age = (data['avg_age'] * data['employees']).sum() / total_employees if total_employees > 0 else 0
        avg_experience = (data['avg_experience'] * data['employees']).sum() / total_employees if total_employees > 0 else 0
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = self._format_report(
            service_name, data, total_employees, total_attrition, 
            avg_age, avg_experience, report_date
        )
        
        return report_text, None
    
    def _format_report(self, service_name, data, total_employees, total_attrition, 
                      avg_age, avg_experience, report_date):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞"""
        text = f"üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: {service_name}\n"
        text += f"üìÖ –Ω–∞ {report_date[:10]}\n\n"
        
        text += f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        text += f"‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {int(total_employees):,} —á–µ–ª.\n"
        text += f"‚Ä¢ –¢–µ–∫—É—á–µ—Å—Ç—å: {total_attrition:.1f}%\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {avg_age:.1f} –ª–µ—Ç\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ–ø—ã—Ç: {avg_experience:.1f} –º–µ—Å.\n\n"
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
        age_data = data.groupby('age_category', as_index=False).agg({
            'employees': 'sum',
            'fires': 'sum',
            'avg_age': 'mean',
            'avg_experience': 'mean'
        })
        age_data['attrition_rate'] = (age_data['fires'] / age_data['employees']) * 100
        
        text += "üë• –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –í–û–ó–†–ê–°–¢–£:\n"
        for _, row in age_data.iterrows():
            text += f"\n‚Ä¢ {row['age_category']}:\n"
            text += f"  üë• {int(row['employees']):,} —á–µ–ª. ({row['attrition_rate']:.1f}% —Ç–µ–∫—É—á–µ—Å—Ç–∏)\n"
            text += f"  üìä –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {row['avg_age']:.1f} –ª–µ—Ç\n"
            text += f"  ‚è≥ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {row['avg_experience']:.1f} –º–µ—Å.\n"
        
        # –ì–µ–Ω–¥–µ—Ä–Ω—ã–π —Å–æ—Å—Ç–∞–≤
        gender_data = data.groupby('sex', as_index=False)['employees'].sum()
        text += f"\nüë´ –ì–ï–ù–î–ï–†–ù–´–ô –°–û–°–¢–ê–í:\n"
        for _, row in gender_data.iterrows():
            percentage = (row['employees'] / total_employees) * 100
            gender = "–ñ–µ–Ω—â–∏–Ω—ã" if row['sex'] == 'F' else "–ú—É–∂—á–∏–Ω—ã"
            text += f"‚Ä¢ {gender}: {percentage:.1f}% ({int(row['employees']):,} —á–µ–ª.)\n"
        
        # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        exp_data = data.groupby('experience_category', as_index=False)['employees'].sum()
        text += f"\nüìÖ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –û–ü–´–¢–£:\n"
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ–ø—ã—Ç–∞
        exp_order = ['1 –º–µ—Å', '2 –º–µ—Å', '3 –º–µ—Å', '–¥–æ 1 –≥–æ–¥–∞', '1-2 –≥–æ–¥–∞', '2-3 –≥–æ–¥–∞', '3-5 –ª–µ—Ç', '–±–æ–ª–µ–µ 5 –ª–µ—Ç']
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        exp_data['order'] = exp_data['experience_category'].apply(
            lambda x: exp_order.index(x) if x in exp_order else len(exp_order)
        )
        exp_data = exp_data.sort_values('order')
        
        for _, row in exp_data.iterrows():
            percentage = (row['employees'] / total_employees) * 100
            text += f"‚Ä¢ {row['experience_category']}: {percentage:.1f}% ({int(row['employees']):,} —á–µ–ª.)\n"
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
        text += f"\n‚ö†Ô∏è  –ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í –î–õ–Ø –°–ï–†–í–ò–°–ê:\n"
        
        if total_attrition > 15:
            text += "‚Ä¢ üî¥ –í–´–°–û–ö–ê–Ø –¢–ï–ö–£–ß–ï–°–¢–¨: >15% - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
        elif total_attrition > 10:
            text += "‚Ä¢ üü† –ü–û–í–´–®–ï–ù–ù–ê–Ø –¢–ï–ö–£–ß–ï–°–¢–¨: 10-15% - –≤–Ω–∏–º–∞–Ω–∏–µ –∫ retention\n"
        elif total_attrition > 5:
            text += "‚Ä¢ üü° –£–ú–ï–†–ï–ù–ù–ê–Ø –¢–ï–ö–£–ß–ï–°–¢–¨: 5-10% - –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã\n"
        else:
            text += "‚Ä¢ üü¢ –ù–ò–ó–ö–ê–Ø –¢–ï–ö–£–ß–ï–°–¢–¨: <5% - –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å\n"
        
        # –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        largest_age_group = age_data.nlargest(1, 'employees')
        if len(largest_age_group) > 0:
            text += f"‚Ä¢ üéØ –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∞—è –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞: {largest_age_group['age_category'].iloc[0]} "
            text += f"({largest_age_group['employees'].iloc[0]/total_employees*100:.1f}%)\n"
        
        return text