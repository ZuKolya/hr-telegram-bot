# report_services/demographic_service.py
import pandas as pd

class DemographicReportService:
    def __init__(self, data_repository):
        self.repo = data_repository
    
    def generate_report(self, report_date):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç"""
        data = self.repo.get_demographics_data(report_date)
        
        if len(data) == 0:
            return "‚ùå –ù–µ—Ç –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö", None
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        age_data = data.groupby('age_category', as_index=False)['count'].sum()
        gender_data = data.groupby('sex', as_index=False)['count'].sum()
        exp_data = data.groupby('experience_category', as_index=False)['count'].sum()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = self._format_report(age_data, gender_data, exp_data, report_date)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plot_data = {
            'age_data': age_data,
            'gender_data': gender_data,
            'exp_data': exp_data,
            'report_date': report_date
        }
        
        return report_text, plot_data
    
    def _format_report(self, age_data, gender_data, exp_data, report_date):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞"""
        total_employees = age_data['count'].sum()
        
        text = f"üë• –î–ï–ú–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –Ω–∞ {report_date[:10]}\n\n"
        text += f"üìä –û–±—â–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å: {total_employees:,} —á–µ–ª.\n\n"
        
        text += "üìä –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n"
        age_data = age_data.sort_values('count', ascending=False)
        for _, row in age_data.iterrows():
            percentage = (row['count'] / total_employees) * 100
            text += f"‚Ä¢ {row['age_category']}: {percentage:.1f}% ({int(row['count']):,} —á–µ–ª.)\n"
        
        text += "\nüë´ –ì–µ–Ω–¥–µ—Ä–Ω—ã–π —Å–æ—Å—Ç–∞–≤:\n"
        gender_data = gender_data.sort_values('count', ascending=False)
        for _, row in gender_data.iterrows():
            percentage = (row['count'] / total_employees) * 100
            gender_name = "–ñ–µ–Ω—â–∏–Ω—ã" if row['sex'] == 'F' else "–ú—É–∂—á–∏–Ω—ã"
            text += f"‚Ä¢ {gender_name}: {percentage:.1f}% ({int(row['count']):,} —á–µ–ª.)\n"
        
        text += "\nüìÖ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:\n"
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ–ø—ã—Ç–∞
        exp_order = ['1 –º–µ—Å', '2 –º–µ—Å', '3 –º–µ—Å', '–¥–æ 1 –≥–æ–¥–∞', '1-2 –≥–æ–¥–∞', '2-3 –≥–æ–¥–∞', '3-5 –ª–µ—Ç', '–±–æ–ª–µ–µ 5 –ª–µ—Ç']
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        exp_data['order'] = exp_data['experience_category'].apply(
            lambda x: exp_order.index(x) if x in exp_order else len(exp_order)
        )
        exp_data = exp_data.sort_values('order')
        
        for _, row in exp_data.iterrows():
            percentage = (row['count'] / total_employees) * 100
            text += f"‚Ä¢ {row['experience_category']}: {percentage:.1f}% ({int(row['count']):,} —á–µ–ª.)\n"
        
        # –ê–Ω–∞–ª–∏–∑ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤
        text += f"\nüìà –î–ï–ú–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ù–î–´:\n"
        
        # –°–∞–º—ã–µ –∫—Ä—É–ø–Ω—ã–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        top_age = age_data.nlargest(2, 'count')
        text += f"‚Ä¢ –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {top_age['age_category'].iloc[0]} ({top_age['count'].iloc[0]/total_employees*100:.1f}%)"
        if len(top_age) > 1:
            text += f" –∏ {top_age['age_category'].iloc[1]} ({top_age['count'].iloc[1]/total_employees*100:.1f}%)\n"
        
        # –ì–µ–Ω–¥–µ—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if len(gender_data) == 2:
            ratio = max(gender_data['count'].iloc[0], gender_data['count'].iloc[1]) / min(gender_data['count'].iloc[0], gender_data['count'].iloc[1])
            if ratio > 2:
                text += "‚Ä¢ –ó–∞–º–µ—Ç–Ω—ã–π –≥–µ–Ω–¥–µ—Ä–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å\n"
            else:
                text += "‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–¥–µ—Ä–Ω—ã–π —Å–æ—Å—Ç–∞–≤\n"
        
        return text